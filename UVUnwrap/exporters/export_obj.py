import math
import FreeCAD as App
import UVUlib

def export_obj(packing, filename: str, precision = 5):
    if not packing.Proxy.valid:
        App.Console.PrintError("The UV Mesh packing has not yet generated a valid layout")
        return

    index_offset = 0
    with open(filename, "w") as f:
        f.write("# Generated by the UV Unwrapping workbench for FreeCAD\n")
        for uvMesh, transform in packing.Proxy.transforms.items():
            uvMesh = UVUlib.get_feature(uvMesh)
            for vertex in uvMesh.Proxy.vertices:
                f.write(f"v {vertex[0]} {vertex[1]} {vertex[2]}\n")
            for uv in uvMesh.Proxy.uv:
                uv = transform @ (*uv, 1)
                f.write(f"vt {uv[0]} {uv[1]}\n")
            for triangle in uvMesh.Proxy.triangles:
                f.write(f"f {triangle[0]+1+index_offset}/{triangle[0]+1+index_offset} {triangle[1]+1+index_offset}/{triangle[1]+1+index_offset} {triangle[2]+1+index_offset}/{triangle[2]+1+index_offset}\n")
            index_offset += len(uvMesh.Proxy.vertices)


def export_faceMesh_obj(faceMesh, filename: str):
    index_offset = 0
    with open(filename, "w") as f:
        f.write("# Generated by the UV Unwrapping workbench for FreeCAD\n")
        for vertex in faceMesh.Proxy.vertices:
            f.write(f"v {vertex[0]} {vertex[1]} {vertex[2]}\n")
        for triangle in faceMesh.Proxy.triangles:
            f.write(f"f {triangle[0]+1+index_offset} {triangle[1]+1+index_offset} {triangle[2]+1+index_offset}\n")
